[alias]
	st = status -s
	ci = commit
	br = branch
	co = checkout
	# Word diff
	wdiff = diff --color-words
	df = diff
	dc = diff --cached
	ls = ls-files
	# lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(normal)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	## lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(normal)%s%C(reset) %C(dim normal)- %an%C(reset)' --all
	# lg2 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(normal)%s%C(reset) %C(dim normal)- %an%C(reset)' --all
	lg = !"git lg7"

	# show graph of current branch
	lgb = !"git lg7b"

	# lg3 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(7)·%C(reset) %C(10)%ar%C(reset) %C(7)·%C(reset) %C(normal)%s%C(reset) %C(7)·%C(reset) %C(6)%an%C(reset)%C(1)%d%C(reset)' --all
	# lg4 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(7)·%C(reset) %C(10)%ar%C(reset) %C(7)·%C(reset) %C(normal)%s%C(reset) %C(7)·%C(reset) %C(10)%an%C(reset) %C(7)·%C(reset) %C(1)%d%C(reset)' --all

	# lg5 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(14)·%C(reset) %C(10)%ar%C(reset) %C(14)·%C(reset) %C(12)%s%C(reset) %C(14)·%C(reset) %C(10)%an%C(reset) %C(14)·%C(reset)%C(1)%d%C(reset)' --all
	# lg6 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(14)·%C(reset) %C(10)%ar%C(reset) %C(14)·%C(reset) %C(12)%s%C(reset) %C(14)·%C(reset) %C(10)%an%C(reset) %C(14)·%C(reset)%C(1) %D%C(reset)' --all
	lg7 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(14)·%C(reset) %C(10)%ar%C(reset) %C(14)·%C(reset) %C(12)%s%C(reset) %C(14)·%C(reset) %C(10)%an%C(reset) %C(14)·%C(reset)%C(1) %D%C(reset)' --all


	lg7b = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(14)·%C(reset) %C(10)%ar%C(reset) %C(14)·%C(reset) %C(12)%s%C(reset) %C(14)·%C(reset) %C(10)%an%C(reset) %C(14)·%C(reset)%C(1) %D%C(reset)'

lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
	 lg2a = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'


    lg1 = !"git lg1-specific --all"
    lg2 = !"git lg2-specific --all"
    lg3 = !"git lg3-specific --all"

    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

	# lg71 = log --graph --abbrev-commit --decorate --date=relative --pretty=tformat:'%C(3)%h%C(reset) %C(14)·%C(reset) %C(10)%ar%C(reset) %C(14)·%C(reset) %C(12)%s%C(reset) %C(14)·%C(reset) %C(10)%an%C(reset) %C(14)·%C(reset)%C(1) %D%C(reset)' --all
	# lg8 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(14)·%C(reset) %C(10)%ar%C(reset) %C(14)·%C(reset) %C(12)%s%C(reset) %C(14)·%C(reset) %C(10)%an%C(reset) %C(14)·%C(reset)%C(1) %d%C(reset)' --all
	# lg9 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(14)·%C(reset) %C(10)%ar%C(reset) %C(14)·%C(reset)  %C(14)·%C(reset) %C(10)%an%C(reset) %C(14)·%C(reset)%C(1) %D%C(reset)%n''          %C(12)%s%C(reset)' --all

	## lg8 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(normal)%s%C(reset) %C(dim normal)- %an%C(reset)' --all

	## lg6 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(14 0)·%C(reset) %C(10)%ar%C(reset) %C(14 0)·%C(reset) %C(12)%s%C(reset) %C(14 0)·%C(reset) %C(10)%an%C(reset) %C(14 0)·%C(reset) %C(1)%d%C(reset)' --all
	## lg7 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(8 0)·%C(reset) %C(10)%ar%C(reset) %C(8 0)·%C(reset) %C(12)%s%C(reset) %C(8 0)·%C(reset) %C(10)%an%C(reset) %C(8 0)·%C(reset) %C(1)%d%C(reset)' --all
	; lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=short
	## lol = log --graph --decorate --pretty=oneline --abbrev-commit --date=short
	## lola = log --graph --decorate --pretty=oneline --abbrev-commit --all --date=short

	# List commits showing changed files:
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --stat
	# List oneline commits showing dates:
	# lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	# List oneline commits showing relative dates:
	# ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

	# Show last commit
	last = log -l HEAD --stat

	# Show the history of a file, with diffs:
	filelog = log -u
	fl = log -u
	flw = log -u --word-diff=color
	# Show modified files in last commit:
	dl = "!git ll -1"
	# Show a diff of last commit:
	dlc = diff --cached HEAD^

	# Find a file path in codebase:
	f = "!git ls-files | grep -i"
	# Search/grep the entire codebase for a string:
	grep = grep -Ii
	# Grep from root folder:
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	# Assume a file as unchanged:
	assume = update-index --assume-unchanged
	# Unassume a file:
	unassume = update-index --no-assume-unchanged
	# Show assumed files:
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	# Unassume all the assumed files:
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
	# Assume all:
	assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
	# List all remotes
	remotes = remote -v
	# List all branches
	branches = branch -a
	branches2 = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(refname:short)\" refs/remotes
	# List all tags - reverse sort
	tags = tag --sort=-version:refname
	# Show all git aliases:
	aliases = "!git config -l | grep alias | cut -c 7-"

	# Show files ignored by git:
	ign = ls-files -o -i --exclude-standard

	# Branch summary - show a summary of files changed on the branch
	bsum = "!git diff --compact-summary $(git merge-base --fork-point master)"
	# Branch files - list the files changed on the branch
	bfiles = "!git diff --name-only --relative $(git merge-base --fork-point master)"
	# Branch squash
	bsquash = "!git rebase -i $(git merge-base --fork-point master)"

	# ctags hook from http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
	# ctags = !.git/hooks/ctags

	# Fetch a pull request from bitbucket
	#   example: git prstash origin 3 dest-branch
	#   checks out the 3rd pull request onto dest-branch
	# prstash = "!f() { git fetch $1 refs/pull-requests/$2/from:$3; } ; f"

# vim: set filetype=gitconfig :
