[alias]
	st = status -s
	ci = commit
	br = branch
	co = checkout
	# Word diff
	wdiff = diff --color-words
	df = diff
	dc = diff --cached
	ls = ls-files

    lm  = log --author='Michael Gaffney'

	# show graph of current branch

	lg = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(14)·%C(reset) %C(10)%ar%C(reset) %C(14)·%C(reset) %C(12)%s%C(reset) %C(14)·%C(reset) %C(10)%an%C(reset) %C(14)·%C(reset)%C(1) %D%C(reset)' --all

	lgb = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(3)%h%C(reset) %C(14)·%C(reset) %C(10)%ar%C(reset) %C(14)·%C(reset) %C(12)%s%C(reset) %C(14)·%C(reset) %C(10)%an%C(reset) %C(14)·%C(reset)%C(1) %D%C(reset)'

	# look back - list the last 10 branches I was working on
	# lb = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}'

	# List commits showing changed files:
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%an]" --decorate --stat

	# List oneline commits showing dates:
	# lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	# List oneline commits showing relative dates:
	# ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

	# Show last commit
	last = log -l HEAD --stat

	# Show the history of a file, with diffs:
	filelog = log -u
	fl = log -u
	flw = log -u --word-diff=color

	# Show modified files in last commit:
	dl = "!git ll -1"

	# Show a diff of last commit:
	dlc = diff --cached HEAD^

	# Search/grep the entire codebase for a string:
	grep = grep -Ii
	# Grep from root folder:
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	# Assume a file as unchanged:
	assume = update-index --assume-unchanged
	# Unassume a file:
	unassume = update-index --no-assume-unchanged
	# Show assumed files:
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	# Unassume all the assumed files:
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
	# Assume all:
	assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
	# List all remotes
	remotes = remote -v
	# List all branches
	branches = branch -a
	branches2 = for-each-ref --sort=-committerdate --format='%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(refname:short)' refs/remotes

    o         = log --graph @{u}..HEAD
    out       = log --graph @{u}..HEAD
    outp      = log -p      @{u}..HEAD
    outgoing  = log --graph @{u}..HEAD
    in        = log --graph HEAD..@{u}
    incoming  = log --graph HEAD..@{u}
    inp       = log -p      HEAD..@{u}
    inll      = log         HEAD..@{u} --decorate --numstat --pretty=format:"%C(yellow)%h\\ %C(reset)%<(72,trunc)%s%C(blue)\\ [%an]%C(red)%d"

	# List local branches and last commit time
	recent = branch --sort=-committerdate --format='%(color:green)%(committerdate:relative)%(color:reset) %(refname:short)'

	# List all tags - reverse sort
	tags = tag --sort=-version:refname
	# Show all git aliases:
	aliases = "!git config -l | grep alias | cut -c 7-"

	# Show files ignored by git:
	ls-ignored = ls-files -o -i --exclude-standard

	# Branch summary - show a summary of files changed on the branch
	# bsum = "!git diff --compact-summary $(git merge-base --fork-point main)"
	# bsum = "!f() { git diff --compact-summary $(git merge-base ${1-main} HEAD); }; f"
	# bsum1 = "!f() { git diff --stat $(git merge-base ${1-main} HEAD); }; f"
	# bsum2 = "!f() { git diff --summary $(git merge-base ${1-main} HEAD); }; f"
	# bsum3 = "!f() { git diff --stat-width=250 --compact-summary $(git merge-base ${1-main} HEAD); }; f"
	# bsum4 = "!f() { git diff --stat-width=250 --stat-graph-width=40 --compact-summary $(git merge-base ${1-main} HEAD); }; f"

	# Branch directory summary - show a summary of changes for each sub-directory
	# dsum = "!f() { git diff --dirstat $(git merge-base ${1-main} HEAD); }; f"

	# Branch files - list the files changed on the branch
	# bfiles = "!git diff --name-only --relative $(git merge-base --fork-point main)"
	# bfiles = "!f() { git diff --name-only $(git merge-base ${1-main} HEAD)...; }; f"
	# Branch squash
	# bsquash = "!f() { git rebase -i --autosquash $(git merge-base ${1-main} HEAD); }; f"

	# ctags hook from http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
	# ctags = !.git/hooks/ctags

	# Fetch a pull request from bitbucket
	#   example: git prstash origin 3 dest-branch
	#   checks out the 3rd pull request onto dest-branch
	# prstash = "!f() { git fetch $1 refs/pull-requests/$2/from:$3; } ; f"

	# Fetch a pull request from GitHub
	# prc = "!f() { git fetch origin pull/$1/head:pr-$1 && git checkout pr-$1; } ; f"

	# From tpope vim-fugitive #2066
	# https://github.com/tpope/vim-fugitive/discussions/2066#discussioncomment-3864364
	# https://github.com/tpope/vim-fugitive/issues/1619

	work = "!g() { git fetch && git checkout @{upstream} -t -b $@; }; g"
	# work = !sh -c 'git fetch && git checkout @{upstream} -t -b \"$@\"' _
	# work = !sh -c 'git fetch && git checkout @{upstream} -t -b \"$@\"' _
	# work = !sh -c 'git fetch && git switch @{upstream} -t -b \"$@\"' _

	# move a branch to a new base
	# movebranch = "!f() { \
	# 	: git checkout ; \
	# 	git rebase --onto $2 $(git merge-base $1 @); \
	# }; f"

# vim: set filetype=gitconfig :
