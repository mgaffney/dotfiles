# vim: set filetype=zsh:

# function tj {
#   tmux attach-session -t `tmux list-sessions | sed -E 's/:.*$//' | selecta`
# }

# tars and gzips a list of files/directories
# usage: tgz archive dir1 dir2...
# creates archive.tgz
# (also see `extract` in oh-my-zsh plugins)
function tgz() {
	local -r archive="$1.tar.gz"
	if [ -n "$2" ] ; then
		shift
	fi
	# tar cf - $@ | gzip -c > ${archive}
	tar czf "${archive}" "$@"
  return 0
}

function new-tmux-from-dir-name() {
  tmux new-session -As "$(basename "${PWD}")"
  return 0
}

function g() {
  if [[ $# -gt 0 ]]; then
    git "$@"
  else
    git status -sb
  fi
  return 0
}

function gocd() {
  cd "$(go list -f '{{.Dir}}' "$1")" || return
  return 0
}

function git-delete-branch() {
  local -r branch="$1"
  git push origin --delete "${branch}"
  git branch -d "${branch}"
  return 0
}

function font-search() {
  local -r font="$1"
  brew cask search /"${font}"/
}

function recm() {
  local -r fn="$1"
  if [[ -z "${fn}" ]]; then
    echo "missing note name"
    return 1
  fi
  local dt
  dt=$(date +%Y%m%d)
  local -r outdir="${HOME}/Documents/notes/daily-notes/audio"
  mkdir -p "${outdir}"
  sox -q -d "${outdir}/${fn}-${dt}.mp3"
}


# function gist() {
#   # if there's nothing piped on STDIN
#   if [[ -t 0 ]]; then
#     # and there's no arguments...
#     if ((! $# )); then
#       # take what's on the clipboard and paste it in a new gist
#       command gist -Pcop -f paste.txt
#     else
#       # create a gist based on the arguments give
#       command gist -cop $@
#     fi
#   else
#     # otherwise, create a gist, with arguments, but use the
#     # content from STDIN
#     command gist -cop $@ < /dev/stdin
#   fi
# }

# fh - repeat history
fh() {
  print -z "$( (history) | fzf +s --tac | sed 's/ *[0-9]* *//')"
}

# Go Modules
mod() {
  value="$1"

  if [ -z "$value" ]; then
    case "${GO111MODULE}" in
      "on") value="off" ;;
      "off") value="auto" ;;
      *) value="on" ;;
    esac
  fi

  export GO111MODULE="$value"
  env | grep GO111MODULE
}

mkdcd () {
  [[ -n "$1" ]] && mkdir -p "$1" && builtin cd "$1"
}

timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

profzsh() {
  shell=${1-$SHELL}
  ZPROF=true $shell -i -c exit
}

timevim() {
  for i in $(seq 1 10); do /usr/bin/time vim +qa; done
}

# rars a directory with 50MB splits. Excludes Mac specific files.
#
# usage: rardir bazdir
# creates bazdir.rar
function rardir() {
	local -r dir="$1"
	local -r archive="$1.rar"


  # xattr -d com.apple.quarantine /usr/local/Caskroom/rar/6.10/rar/unrar
  # xattr -d com.apple.quarantine $(which rar)
  # xattr -d com.apple.quarantine /usr/local/Caskroom/rar/6.12/rar/*

  rar a -v50M -r "${archive}" -x "__MACOSX/*" "${dir}"
  return 0
}

# See https://github.com/ryboe/q
function qq() {
    clear

    logpath="$TMPDIR/q"
    if [[ -z "$TMPDIR" ]]; then
        logpath="/tmp/q"
    fi

    if [[ ! -f "$logpath" ]]; then
        echo 'Q LOG' > "$logpath"
    fi

    tail -100f -- "$logpath"
}

function rmqq() {
    logpath="$TMPDIR/q"
    if [[ -z "$TMPDIR" ]]; then
        logpath="/tmp/q"
    fi
    if [[ -f "$logpath" ]]; then
        rm "$logpath"
    fi
    qq
}

function sqlup() {
  if [[ -n "${PG_DB}" ]]; then
    if [[ -d internal/db/schema/migrations ]]; then
      for f in $(gls -v internal/db/schema/migrations/{base,oss}/postgres/**/*.up.sql); do
        echo "${f}"
        psql -d "${PG_DB}" -f "${f}"
      done
    fi
  fi
}

function fvim () {
  lsof -c '/vim/i' -a -d cwd | cut -w -f1,9- | awk 'NR<2{print $0;next}{print $0| "sort -u"}'
}

ghcs() {
	FUNCNAME="$funcstack[1]"
	TARGET="shell"
	local GH_DEBUG="$GH_DEBUG"

	read -r -d '' __USAGE <<-EOF
	Wrapper around \`gh copilot suggest\` to suggest a command based on a natural language description of the desired output effort.
	Supports executing suggested commands if applicable.

	USAGE
	  $FUNCNAME [flags] <prompt>

	FLAGS
	  -d, --debug              Enable debugging
	  -h, --help               Display help usage
	  -t, --target target      Target for suggestion; must be shell, gh, git
	                           default: "$TARGET"

	EXAMPLES

	- Guided experience
	  $ $FUNCNAME

	- Git use cases
	  $ $FUNCNAME -t git "Undo the most recent local commits"
	  $ $FUNCNAME -t git "Clean up local branches"
	  $ $FUNCNAME -t git "Setup LFS for images"

	- Working with the GitHub CLI in the terminal
	  $ $FUNCNAME -t gh "Create pull request"
	  $ $FUNCNAME -t gh "List pull requests waiting for my review"
	  $ $FUNCNAME -t gh "Summarize work I have done in issues and pull requests for promotion"

	- General use cases
	  $ $FUNCNAME "Kill processes holding onto deleted files"
	  $ $FUNCNAME "Test whether there are SSL/TLS issues with github.com"
	  $ $FUNCNAME "Convert SVG to PNG and resize"
	  $ $FUNCNAME "Convert MOV to animated PNG"
	EOF

	local OPT OPTARG OPTIND
	while getopts "dht:-:" OPT; do
		if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
			OPT="${OPTARG%%=*}"       # extract long option name
			OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
			OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
		fi

		case "$OPT" in
			debug | d)
				GH_DEBUG=api
				;;

			help | h)
				echo "$__USAGE"
				return 0
				;;

			target | t)
				TARGET="$OPTARG"
				;;
		esac
	done

	# shift so that $@, $1, etc. refer to the non-option arguments
	shift "$((OPTIND-1))"

	TMPFILE="$(mktemp -t gh-copilotXXX)"
	trap 'rm -f "$TMPFILE"' EXIT
	if GH_DEBUG="$GH_DEBUG" gh copilot suggest -t "$TARGET" "$@" --shell-out "$TMPFILE"; then
		if [ -s "$TMPFILE" ]; then
			FIXED_CMD="$(cat $TMPFILE)"
			print -s "$FIXED_CMD"
			echo
			eval "$FIXED_CMD"
		fi
	else
		return 1
	fi
}

ghce() {
	FUNCNAME="$funcstack[1]"
	local GH_DEBUG="$GH_DEBUG"

	read -r -d '' __USAGE <<-EOF
	Wrapper around \`gh copilot explain\` to explain a given input command in natural language.

	USAGE
	  $FUNCNAME [flags] <command>

	FLAGS
	  -d, --debug   Enable debugging
	  -h, --help    Display help usage

	EXAMPLES

	# View disk usage, sorted by size
	$ $FUNCNAME 'du -sh | sort -h'

	# View git repository history as text graphical representation
	$ $FUNCNAME 'git log --oneline --graph --decorate --all'

	# Remove binary objects larger than 50 megabytes from git history
	$ $FUNCNAME 'bfg --strip-blobs-bigger-than 50M'
	EOF

	local OPT OPTARG OPTIND
	while getopts "dh-:" OPT; do
		if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
			OPT="${OPTARG%%=*}"       # extract long option name
			OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
			OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
		fi

		case "$OPT" in
			debug | d)
				GH_DEBUG=api
				;;

			help | h)
				echo "$__USAGE"
				return 0
				;;
		esac
	done

	# shift so that $@, $1, etc. refer to the non-option arguments
	shift "$((OPTIND-1))"

	GH_DEBUG="$GH_DEBUG" gh copilot explain "$@"
}

# This script was automatically generated by the broot program
# More information can be found in https://github.com/Canop/broot
# This function starts broot and executes the command
# it produces, if any.
# It's needed because some shell commands, like `cd`,
# have no useful effect if executed in a subshell.
function br {
    local cmd cmd_file code
    cmd_file=$(mktemp)
    if broot --outcmd "$cmd_file" "$@"; then
        cmd=$(<"$cmd_file")
        command rm -f "$cmd_file"
        eval "$cmd"
    else
        code=$?
        command rm -f "$cmd_file"
        return "$code"
    fi
}

